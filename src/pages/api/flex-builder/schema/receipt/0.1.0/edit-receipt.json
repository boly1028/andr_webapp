{"schema":{"description":"Edit a receipt by ID. Only executable by the assigned `minter` address or a valid `operator`.","type":"object","required":["edit_receipt"],"properties":{"edit_receipt":{"type":"object","required":["receipt","receipt_id"],"properties":{"receipt":{"description":"A struct representation of a receipt. Contains a vector of CosmWasm [Event](https://docs.rs/cosmwasm-std/0.16.0/cosmwasm_std/struct.Event.html) structs.","type":"object","required":["events"],"properties":{"events":{"description":"A vector of CosmWasm [Event](https://docs.rs/cosmwasm-std/0.16.0/cosmwasm_std/struct.Event.html) structs related to the receipt","type":"array","items":{"description":"A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/master/core/events.html [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70","type":"object","required":["attributes","type"],"properties":{"attributes":{"description":"The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/master/core/events.html","type":"array","items":{"description":"An key value pair that is used in the context of event attributes in logs","type":"object","required":["key","value"],"properties":{"key":{"type":"string"},"value":{"type":"string"}}}},"type":{"description":"The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.","type":"string"}}}}},"title":"receipt"},"receipt_id":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","title":"receipt_id"}}}},"additionalProperties":false,"$id":"edit-receipt","class":"modifier","version":"0.1.0","classifier":""},"ui-schema":{},"form-data":{}}