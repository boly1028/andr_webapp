{"schema":{"type":"object","required":["andr_receive"],"properties":{"andr_receive":{"oneOf":[{"description":"Standard Messages","type":"object","required":["receive"],"properties":{"receive":{"anyOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"},{"type":"null"}]}},"additionalProperties":false},{"type":"object","required":["update_owner"],"properties":{"update_owner":{"type":"object","required":["address"],"properties":{"address":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["update_operators"],"properties":{"update_operators":{"type":"object","required":["operators"],"properties":{"operators":{"type":"array","items":{"type":"string"}}}}},"additionalProperties":false},{"type":"object","required":["update_app_contract"],"properties":{"update_app_contract":{"type":"object","required":["address"],"properties":{"address":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["withdraw"],"properties":{"withdraw":{"type":"object","properties":{"recipient":{"anyOf":[{"oneOf":[{"description":"An address that is not another ADO. It is assumed that it is a valid address.","type":"object","required":["addr"],"properties":{"addr":{"type":"string"}},"additionalProperties":false},{"type":"object","required":["a_d_o"],"properties":{"a_d_o":{"description":"ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message","type":"object","required":["address"],"properties":{"address":{"description":"Addr can also be a human-readable identifier used in a app contract.","allOf":[{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}}]},"msg":{"anyOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"},{"type":"null"}]}}}},"additionalProperties":false}]},{"type":"null"}]},"tokens_to_withdraw":{"type":["array","null"],"items":{"type":"object","required":["token"],"properties":{"token":{"type":"string"},"withdrawal_type":{"anyOf":[{"oneOf":[{"type":"object","required":["amount"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}},"additionalProperties":false},{"type":"object","required":["percentage"],"properties":{"percentage":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string"}},"additionalProperties":false}]},{"type":"null"}]}}}}}}},"additionalProperties":false},{"type":"object","required":["register_module"],"properties":{"register_module":{"type":"object","required":["module"],"properties":{"module":{"description":"Modules can be instantiated in two different ways New - Provide an instantiation message for the contract, a new contract will be instantiated and the address recorded Address - Provide an address for an already instantiated module contract A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated","type":"object","required":["address","is_mutable","module_type"],"properties":{"address":{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}},"is_mutable":{"type":"boolean"},"module_type":{"type":"string"}}}}}},"additionalProperties":false},{"type":"object","required":["deregister_module"],"properties":{"deregister_module":{"type":"object","required":["module_idx"],"properties":{"module_idx":{"description":"A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```","type":"string"}}}},"additionalProperties":false},{"type":"object","required":["alter_module"],"properties":{"alter_module":{"type":"object","required":["module","module_idx"],"properties":{"module":{"description":"Modules can be instantiated in two different ways New - Provide an instantiation message for the contract, a new contract will be instantiated and the address recorded Address - Provide an address for an already instantiated module contract A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated","type":"object","required":["address","is_mutable","module_type"],"properties":{"address":{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}},"is_mutable":{"type":"boolean"},"module_type":{"type":"string"}}},"module_idx":{"description":"A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```","type":"string"}}}},"additionalProperties":false},{"type":"object","required":["refresh_address"],"properties":{"refresh_address":{"type":"object","required":["contract"],"properties":{"contract":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["refresh_addresses"],"properties":{"refresh_addresses":{"type":"object","properties":{"limit":{"type":["integer","null"],"format":"uint32","minimum":0},"start_after":{"type":["string","null"]}}}},"additionalProperties":false}],"title":"andr_receive"}},"additionalProperties":false,"$id":"","class":"modifier"},"ui-schema":{},"form-data":{}}