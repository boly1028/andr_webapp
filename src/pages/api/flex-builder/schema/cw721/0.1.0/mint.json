{"schema":{"description":"Mints a token","type":"object","required":["mint"],"properties":{"mint":{"type":"object","required":["extension","owner","token_id"],"properties":{"extension":{"description":"Any custom extension used by this contract","allOf":[{"type":"object","required":["archived","name","publisher"],"properties":{"archived":{"description":"Whether the token is archived or not","type":"boolean"},"description":{"description":"An optional description of the token","type":["string","null"]},"metadata":{"description":"The metadata of the token (if it exists)","anyOf":[{"type":"object","required":["data_type"],"properties":{"attributes":{"description":"On chain attributes related to the token (basic key/value)","type":["array","null"],"items":{"type":"object","required":["key","value"],"properties":{"display_label":{"description":"The string used to display the attribute, if none is provided the `key` field can be used","type":["string","null"]},"key":{"description":"The key for the attribute","type":"string"},"value":{"description":"The value for the attribute","type":"string"}}}},"data_type":{"description":"The metadata type","allOf":[{"description":"Enum used to define the type of metadata held by a token","type":"string","enum":["image","video","audio","domain","json","other"]}]},"data_url":{"description":"A URL to any off-chain data relating to the token, the response from this URL should match the defined `data_type` of the token","type":["string","null"]},"external_url":{"description":"A URL to the token's source","type":["string","null"]}}},{"type":"null"}]},"name":{"description":"The name of the token","type":"string"},"publisher":{"description":"The original publisher of the token (immutable)","type":"string"},"transfer_agreement":{"description":"The transfer agreement of the token (if it exists)","anyOf":[{"description":"A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.","type":"object","required":["amount","purchaser"],"properties":{"amount":{"description":"The amount required for the purchaser to transfer ownership of the token","allOf":[{"oneOf":[{"description":"The raw value.","type":"object","required":["raw"],"properties":{"raw":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"denom":{"type":"string"}}}},"additionalProperties":false},{"description":"The pointer to the primitive. This SHOULD be of the same underlying type as `T`. For example, if `T` is `String`, then `PrimitivePointer` should point to a Primitive::String(..). This cannot be enforced at compile time though, so it is up to the discretion of the user.","type":"object","required":["pointer"],"properties":{"pointer":{"type":"object","required":["address"],"properties":{"address":{"description":"The address of the primitive contract.","allOf":[{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}}]},"key":{"description":"The optional key for the stored data.","type":["string","null"]}}}},"additionalProperties":false}]}]},"purchaser":{"description":"The address of the purchaser","type":"string"}}},{"type":"null"}]}}}],"title":"extension"},"owner":{"description":"The owner of the newly minter NFT","type":"string","title":"owner"},"token_id":{"description":"Unique ID of the NFT","type":"string","title":"token_id"},"token_uri":{"description":"Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema","type":["string","null"],"title":"token_uri"}}}},"additionalProperties":false,"$id":"mint","class":"modifier"},"ui-schema":{},"form-data":{}}