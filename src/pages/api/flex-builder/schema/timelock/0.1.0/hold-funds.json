{"schema":{"description":"Hold funds in Escrow","type":"object","required":["hold_funds"],"properties":{"hold_funds":{"type":"object","properties":{"condition":{"anyOf":[{"description":"Enum used to specify the condition which must be met in order for the Escrow to unlock.","oneOf":[{"description":"Requires a given time or block height to be reached.","type":"object","required":["expiration"],"properties":{"expiration":{"description":"Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)","oneOf":[{"description":"AtHeight will expire when `env.block.height` >= height","type":"object","required":["at_height"],"properties":{"at_height":{"type":"integer","format":"uint64","minimum":0}},"additionalProperties":false},{"description":"AtTime will expire when `env.block.time` >= time","type":"object","required":["at_time"],"properties":{"at_time":{"description":"A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```","allOf":[{"description":"A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```","type":"string"}]}},"additionalProperties":false},{"description":"Never will never expire. Used to express the empty variant","type":"object","required":["never"],"properties":{"never":{"type":"object"}},"additionalProperties":false}]}},"additionalProperties":false},{"description":"Requires a minimum amount of funds to be deposited.","type":"object","required":["minimum_funds"],"properties":{"minimum_funds":{"type":"array","items":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"denom":{"type":"string"}}}}},"additionalProperties":false}]},{"type":"null"}],"title":"condition"},"recipient":{"anyOf":[{"oneOf":[{"description":"An address that is not another ADO. It is assumed that it is a valid address.","type":"object","required":["addr"],"properties":{"addr":{"type":"string"}},"additionalProperties":false},{"type":"object","required":["a_d_o"],"properties":{"a_d_o":{"description":"ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message","type":"object","required":["address"],"properties":{"address":{"description":"Addr can also be a human-readable identifier used in a app contract.","allOf":[{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}}]},"msg":{"anyOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"},{"type":"null"}]}}}},"additionalProperties":false}]},{"type":"null"}],"title":"recipient"}}}},"additionalProperties":false,"$id":"hold-funds","class":"modifier","version":"version","classifier":""},"ui-schema":{},"form-data":{}}