{
  "schema": {
    "$schema": "primitives/0.1.0/uint128",
    "class": "primitive",
    "classifier": "",
    "type": "object",
    "title": "Unsigned 128-bit Integer",
    "description": "Store values of 128-bit unsigned integers to reference when needed.",
    "required": ["set_value"],
    "properties": {
      "set_value": {
        "type": "object",
        "title": "Set Value",
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "required": ["value"],
        "properties": {
          "key": {
            "type": ["string", "null"],
            "title": "Field Name"
          },
          "value": {
            "title": "Field Value",
            "type": "object",
            "required": ["uint128"],
            "properties": {
              "uint128": {
                "title": "",
                "description": "",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "additionalProperties": false
  },
  "ui-schema": {},
  "form-data": {}
}
