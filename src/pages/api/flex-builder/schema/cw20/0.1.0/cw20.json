{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Cw20","type":"object","required":["decimals","initial_balances","name","symbol"],"properties":{"decimals":{"type":"integer","format":"uint8","minimum":0,"title":"decimals"},"initial_balances":{"type":"array","items":{"type":"object","required":["address","amount"],"properties":{"address":{"type":"string"},"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"title":"initial_balances"},"marketing":{"anyOf":[{"type":"object","properties":{"description":{"type":["string","null"]},"logo":{"anyOf":[{"description":"This is used for uploading logo data, or setting it in InstantiateData","oneOf":[{"description":"A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.","type":"object","required":["url"],"properties":{"url":{"type":"string"}},"additionalProperties":false},{"description":"Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants","type":"object","required":["embedded"],"properties":{"embedded":{"description":"This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.","oneOf":[{"description":"Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)","type":"object","required":["svg"],"properties":{"svg":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"}},"additionalProperties":false},{"description":"Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.","type":"object","required":["png"],"properties":{"png":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"}},"additionalProperties":false}]}},"additionalProperties":false}]},{"type":"null"}]},"marketing":{"type":["string","null"]},"project":{"type":["string","null"]}}},{"type":"null"}],"title":"marketing"},"mint":{"anyOf":[{"type":"object","required":["minter"],"properties":{"cap":{"description":"cap is a hard cap on total supply that can be achieved by minting. Note that this refers to total_supply. If None, there is unlimited cap.","anyOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},{"type":"null"}]},"minter":{"type":"string"}}},{"type":"null"}],"title":"mint"},"modules":{"type":["array","null"],"items":{"description":"A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated","type":"object","required":["address","is_mutable","module_type"],"properties":{"address":{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}}},"is_mutable":{"type":"boolean"},"module_type":{"type":"string"}}},"title":"modules"},"name":{"type":"string","title":"name"},"symbol":{"type":"string","title":"symbol"}},"$id":"cw20","classifier":"","class":"baseADO"},"ui-schema":{},"form-data":{}}