{"schema":{"type":"object","required":["withdraw"],"properties":{"withdraw":{"type":"object","required":["withdrawals"],"properties":{"recipient":{"anyOf":[{"oneOf":[{"description":"An address that is not another ADO. It is assumed that it is a valid address.","type":"object","required":["addr"],"properties":{"addr":{"type":"string"}},"additionalProperties":false},{"type":"object","required":["a_d_o"],"properties":{"a_d_o":{"description":"ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message","type":"object","required":["address"],"properties":{"address":{"description":"Addr can also be a human-readable identifier used in a app contract.","allOf":[{"type":"object","required":["identifier"],"properties":{"identifier":{"description":"Can be either an address or identifier of an ADO in a app.","type":"string"}},"additionalProperties":false}]},"msg":{"anyOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string"},{"type":"null"}]}},"additionalProperties":false}},"additionalProperties":false}]},{"type":"null"}],"title":"Recipient"},"strategy":{"anyOf":[{"type":"string","enum":["anchor"]},{"type":"null"}],"title":"Strategy"},"withdrawals":{"type":"array","items":{"type":"object","required":["token"],"properties":{"token":{"type":"string"},"withdrawal_type":{"anyOf":[{"oneOf":[{"type":"object","required":["amount"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}},"additionalProperties":false},{"type":"object","required":["percentage"],"properties":{"percentage":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string"}},"additionalProperties":false}]},{"type":"null"}]}},"additionalProperties":false},"title":"Withdrawals"}},"additionalProperties":false,"title":"Withdraw"}},"additionalProperties":false,"title":"Withdraw","$id":"withdraw","class":"modifier","version":"0.1.0","classifier":""},"ui-schema":{},"form-data":{}}