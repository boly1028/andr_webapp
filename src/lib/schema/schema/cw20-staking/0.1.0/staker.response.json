{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Staker","type":"object","required":["address","balance","pending_rewards","share"],"properties":{"address":{"description":"Address of the staker.","type":"string","title":"Address"},"balance":{"description":"The staker's balance of tokens.","allOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}],"title":"Balance"},"pending_rewards":{"description":"The staker's pending rewards represented as [(token_1, amount_1), ..., (token_n, amount_n)]","type":"array","items":{"type":"array","items":[{"type":"string"},{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}],"maxItems":2,"minItems":2},"title":"Pending rewards"},"share":{"description":"The staker's share of the tokens.","allOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}],"title":"Share"}},"additionalProperties":false,"$id":"staker","version":"0.1.0","classifier":"response","class":"response"},"ui-schema":{},"form-data":{}}