{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Config","type":"object","required":["deposit_window","incentive_token","init_timestamp","lockdrop_incentives","native_denom","withdrawal_window"],"properties":{"deposit_window":{"description":"Number of seconds for which lockup deposits will be accepted.","type":"integer","format":"uint64","minimum":0,"title":"Deposit window"},"incentive_token":{"description":"The token being given as incentive.","type":"string","title":"Incentive token"},"init_timestamp":{"description":"Bootstrap Contract address to which tokens can be delegated to for bootstrapping TOKEN-NATIVE Pool. Timestamp till when deposits can be made.","type":"integer","format":"uint64","minimum":0,"title":"Init timestamp"},"lockdrop_incentives":{"description":"Total token lockdrop incentives to be distributed among the users.","allOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}],"title":"Lockdrop incentives"},"native_denom":{"description":"The native token being deposited.","type":"string","title":"Native denom"},"withdrawal_window":{"description":"Number of seconds for which lockup withdrawals will be allowed.","type":"integer","format":"uint64","minimum":0,"title":"Withdrawal window"}},"additionalProperties":false,"$id":"config","version":"1.0.0","classifier":"response","class":"response"},"ui-schema":{},"form-data":{}}