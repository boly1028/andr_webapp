{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"User info","type":"object","required":["is_lockdrop_claimed","total_incentives","total_native_locked","withdrawal_flag"],"properties":{"is_lockdrop_claimed":{"type":"boolean","title":"Is lockdrop claimed"},"total_incentives":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","title":"Total incentives"},"total_native_locked":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","title":"Total native locked"},"withdrawal_flag":{"type":"boolean","title":"Withdrawal flag"}},"additionalProperties":false,"$id":"user_info","version":"0.2.1","classifier":"response","class":"response"},"ui-schema":{},"form-data":{}}