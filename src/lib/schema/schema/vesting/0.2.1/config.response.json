{
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Config",
    "type": "object",
    "required": [
      "denom",
      "is_multi_batch_enabled",
      "recipient",
      "unbonding_duration"
    ],
    "properties": {
      "denom": {
        "description": "The denom of the coin being vested.",
        "type": "string",
        "title": "Denom"
      },
      "is_multi_batch_enabled": {
        "description": "Whether or not multiple batches are supported.",
        "type": "boolean",
        "title": "Is multi batch enabled"
      },
      "recipient": {
        "description": "The recipient of each batch.",
        "allOf": [
          {
            "description": "A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.",
            "type": "object",
            "required": ["address"],
            "properties": {
              "address": {
                "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
                "type": "string",
                "$original_type": "AndrAddr"
              },
              "ibc_recovery_address": {
                "anyOf": [
                  {
                    "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
                    "type": "string",
                    "$original_type": "AndrAddr"
                  },
                  { "type": "null" }
                ]
              },
              "msg": {
                "anyOf": [
                  {
                    "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
                    "type": "string",
                    "$original_type": "Binary"
                  },
                  { "type": "null" }
                ]
              }
            },
            "additionalProperties": false,
            "$original_type": "Recipient"
          }
        ],
        "title": "Recipient"
      },
      "unbonding_duration": {
        "description": "The unbonding duration of the native staking module.",
        "allOf": [
          {
            "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
            "oneOf": [
              {
                "type": "object",
                "required": ["height"],
                "properties": {
                  "height": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Time in seconds",
                "type": "object",
                "required": ["time"],
                "properties": {
                  "time": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ],
            "$original_type": "Duration"
          }
        ],
        "title": "Unbonding duration"
      }
    },
    "additionalProperties": false,
    "$id": "config",
    "version": "0.2.1",
    "classifier": "response",
    "class": "response"
  },
  "ui-schema": {},
  "form-data": {}
}
