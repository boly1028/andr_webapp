{
    "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Vesting",
        "type": "object",
        "required": [
            "denom",
            "is_multi_batch_enabled",
            "kernel_address",
            "recipient",
            "unbonding_duration"
        ],
        "properties": {
            "denom": {
                "description": "The denom of the coin being vested.",
                "type": "string",
                "title": "Denom"
            },
            "is_multi_batch_enabled": {
                "description": "Whether or not multi-batching has been enabled.",
                "type": "boolean",
                "title": "Is multi batch enabled"
            },
            "kernel_address": {
                "type": "string",
                "title": "Kernel address",
                "default": ""
            },
            "modules": {
                "type": [
                    "array",
                    "null"
                ],
                "items": {
                    "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
                    "type": "object",
                    "required": [
                        "address",
                        "is_mutable"
                    ],
                    "properties": {
                        "address": {
                            "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
                            "type": "string",
                            "$original_type": "AndrAddr"
                        },
                        "is_mutable": {
                            "type": "boolean"
                        },
                        "name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    "additionalProperties": false,
                    "$original_type": "Module"
                },
                "title": "Modules"
            },
            "owner": {
                "type": [
                    "string",
                    "null"
                ],
                "title": "Owner"
            },
            "recipient": {
                "description": "The recipient of all funds locked in this contract.",
                "allOf": [
                    {
                        "description": "A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.",
                        "type": "object",
                        "required": [
                            "address"
                        ],
                        "properties": {
                            "address": {
                                "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
                                "type": "string",
                                "$original_type": "AndrAddr"
                            },
                            "msg": {
                                "anyOf": [
                                    {
                                        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
                                        "type": "string",
                                        "$original_type": "Binary"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false,
                        "$original_type": "Recipient"
                    }
                ],
                "title": "Recipient"
            },
            "unbonding_duration": {
                "description": "The unbonding duration of the native staking module.",
                "allOf": [
                    {
                        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
                        "oneOf": [
                            {
                                "type": "object",
                                "required": [
                                    "height"
                                ],
                                "properties": {
                                    "height": {
                                        "type": "integer",
                                        "format": "uint64",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "description": "Time in seconds",
                                "type": "object",
                                "required": [
                                    "time"
                                ],
                                "properties": {
                                    "time": {
                                        "type": "integer",
                                        "format": "uint64",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "$original_type": "Duration"
                    }
                ],
                "title": "Unbonding duration"
            }
        },
        "additionalProperties": false,
        "$id": "vesting",
        "version": "0.2.1",
        "classifier": "",
        "class": "baseADO",
        "description": "The Vesting ADO allows users to set up custom vesting schedules for funds, specifying the lockup duration, release intervals and much more."
    },
    "ui-schema": {
        "kernel_address": {
            "ui:widget": "hidden"
        }
    },
    "form-data": {}
}