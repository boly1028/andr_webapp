{
  "schema": {
    "type": "object",
    "required": ["set_permission"],
    "properties": {
      "set_permission": {
        "type": "object",
        "required": ["action", "actor", "permission"],
        "properties": {
          "action": { "type": "string", "title": "Action" },
          "actor": {
            "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
            "type": "string",
            "$original_type": "AndrAddr",
            "title": "Actor"
          },
          "permission": {
            "description": "An enum to represent a user's permission for an action\n\n- **Blacklisted** - The user cannot perform the action until after the provided expiration - **Limited** - The user can perform the action while uses are remaining and before the provided expiration **for a permissioned action** - **Whitelisted** - The user can perform the action until the provided expiration **for a permissioned action**\n\nExpiration defaults to `Never` if not provided",
            "oneOf": [
              {
                "type": "object",
                "required": ["blacklisted"],
                "properties": {
                  "blacklisted": {
                    "anyOf": [
                      {
                        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
                        "oneOf": [
                          {
                            "description": "AtHeight will expire when `env.block.height` >= height",
                            "type": "object",
                            "required": ["at_height"],
                            "properties": {
                              "at_height": {
                                "type": "integer",
                                "format": "uint64",
                                "minimum": 0
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "description": "AtTime will expire when `env.block.time` >= time",
                            "type": "object",
                            "required": ["at_time"],
                            "properties": {
                              "at_time": {
                                "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
                                "allOf": [
                                  {
                                    "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
                                    "type": "string",
                                    "$original_type": "Uint64"
                                  }
                                ],
                                "$original_type": "Timestamp"
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "description": "Never will never expire. Used to express the empty variant",
                            "type": "object",
                            "required": ["never"],
                            "properties": {
                              "never": {
                                "type": "object",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "$original_type": "Expiration"
                      },
                      { "type": "null" }
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "required": ["limited"],
                "properties": {
                  "limited": {
                    "type": "object",
                    "required": ["uses"],
                    "properties": {
                      "expiration": {
                        "anyOf": [
                          {
                            "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
                            "oneOf": [
                              {
                                "description": "AtHeight will expire when `env.block.height` >= height",
                                "type": "object",
                                "required": ["at_height"],
                                "properties": {
                                  "at_height": {
                                    "type": "integer",
                                    "format": "uint64",
                                    "minimum": 0
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "description": "AtTime will expire when `env.block.time` >= time",
                                "type": "object",
                                "required": ["at_time"],
                                "properties": {
                                  "at_time": {
                                    "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
                                    "allOf": [
                                      {
                                        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
                                        "type": "string",
                                        "$original_type": "Uint64"
                                      }
                                    ],
                                    "$original_type": "Timestamp"
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "description": "Never will never expire. Used to express the empty variant",
                                "type": "object",
                                "required": ["never"],
                                "properties": {
                                  "never": {
                                    "type": "object",
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              }
                            ],
                            "$original_type": "Expiration"
                          },
                          { "type": "null" }
                        ]
                      },
                      "uses": {
                        "type": "integer",
                        "format": "uint32",
                        "minimum": 0
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "required": ["whitelisted"],
                "properties": {
                  "whitelisted": {
                    "anyOf": [
                      {
                        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
                        "oneOf": [
                          {
                            "description": "AtHeight will expire when `env.block.height` >= height",
                            "type": "object",
                            "required": ["at_height"],
                            "properties": {
                              "at_height": {
                                "type": "integer",
                                "format": "uint64",
                                "minimum": 0
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "description": "AtTime will expire when `env.block.time` >= time",
                            "type": "object",
                            "required": ["at_time"],
                            "properties": {
                              "at_time": {
                                "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
                                "allOf": [
                                  {
                                    "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
                                    "type": "string",
                                    "$original_type": "Uint64"
                                  }
                                ],
                                "$original_type": "Timestamp"
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "description": "Never will never expire. Used to express the empty variant",
                            "type": "object",
                            "required": ["never"],
                            "properties": {
                              "never": {
                                "type": "object",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "$original_type": "Expiration"
                      },
                      { "type": "null" }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ],
            "$original_type": "Permission",
            "title": "Permission"
          }
        },
        "additionalProperties": false,
        "title": "Set permission"
      }
    },
    "additionalProperties": false,
    "title": "Set permission",
    "$id": "set-permission",
    "class": "modifier",
    "version": "0.2.1",
    "classifier": ""
  },
  "ui-schema": {},
  "form-data": {}
}
