{"schema":{"type":"object","required":["update_rates"],"properties":{"update_rates":{"type":"object","required":["rates"],"properties":{"rates":{"type":"array","items":{"type":"object","required":["is_additive","rate","recipients"],"properties":{"description":{"type":["string","null"]},"is_additive":{"type":"boolean"},"rate":{"description":"An enum used to define various types of fees","oneOf":[{"description":"A flat rate fee","type":"object","required":["flat"],"properties":{"flat":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"},"denom":{"type":"string"}},"$original_type":"Coin"}},"additionalProperties":false},{"description":"A percentage fee","type":"object","required":["percent"],"properties":{"percent":{"type":"object","required":["percent"],"properties":{"percent":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string","$original_type":"Decimal"}},"additionalProperties":false,"$original_type":"PercentRate"}},"additionalProperties":false}],"$original_type":"Rate"},"recipients":{"type":"array","items":{"description":"A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.","type":"object","required":["address"],"properties":{"address":{"description":"An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`","type":"string","$original_type":"AndrAddr"},"msg":{"anyOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string","$original_type":"Binary"},{"type":"null"}]}},"additionalProperties":false,"$original_type":"Recipient"}}},"additionalProperties":false,"$original_type":"RateInfo"},"title":"Rates"}},"additionalProperties":false,"title":"Update rates"}},"additionalProperties":false,"title":"Update rates","$id":"update-rates","class":"modifier","version":"0.2.1","classifier":""},"ui-schema":{},"form-data":{}}