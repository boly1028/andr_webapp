{
  "schema": {
    "description": "Receive for CW20 tokens, used for purchasing and starting sales",
    "type": "object",
    "required": ["receive"],
    "properties": {
      "receive": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": ["amount", "msg", "sender"],
        "properties": {
          "amount": {
            "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
            "type": "string",
            "$original_type": "Uint128",
            "title": "Amount"
          },
          "msg": {
            "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
            "type": "string",
            "$original_type": "Binary",
            "title": "Msg"
          },
          "sender": { "type": "string", "title": "Sender" }
        },
        "additionalProperties": false,
        "$original_type": "Cw20ReceiveMsg",
        "title": "Receive"
      }
    },
    "additionalProperties": false,
    "title": "Receive",
    "$id": "receive",
    "class": "modifier",
    "version": "0.2.2",
    "classifier": ""
  },
  "ui-schema": {},
  "form-data": {}
}
