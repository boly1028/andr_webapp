{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Sale","type":"object","properties":{"sale":{"description":"The sale data if it exists","anyOf":[{"description":"Struct used to define a token sale. The asset used for the sale is defined as the key for the storage map.","type":"object","required":["amount","exchange_rate","recipient"],"properties":{"amount":{"description":"The amount for sale at the given rate","allOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}]},"exchange_rate":{"description":"The rate at which to exchange tokens (amount of exchanged asset to purchase sale asset)","allOf":[{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}]},"recipient":{"description":"The recipient of the sale proceeds","type":"string"}},"additionalProperties":false},{"type":"null"}],"title":"Sale"}},"additionalProperties":false,"$id":"sale","version":"0.2.2","classifier":"response","class":"response"},"ui-schema":{},"form-data":{}}