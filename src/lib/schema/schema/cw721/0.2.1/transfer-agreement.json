{"schema":{"description":"Assigns a `TransferAgreement` for a token","type":"object","required":["transfer_agreement"],"properties":{"transfer_agreement":{"type":"object","required":["token_id"],"properties":{"agreement":{"anyOf":[{"description":"A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.","type":"object","required":["amount","purchaser"],"properties":{"amount":{"description":"The amount required for the purchaser to transfer ownership of the token","allOf":[{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"denom":{"type":"string"}}}]},"purchaser":{"description":"The address of the purchaser","type":"string"}},"additionalProperties":false},{"type":"null"}],"title":"Agreement"},"token_id":{"type":"string","title":"Token id"}},"additionalProperties":false,"title":"Transfer agreement"}},"additionalProperties":false,"title":"Transfer agreement","$id":"transfer-agreement","class":"modifier","version":"0.2.1","classifier":""},"ui-schema":{},"form-data":{}}