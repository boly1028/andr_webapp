{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Get value","type":"object","required":["key","value"],"properties":{"key":{"type":"string","title":"Key"},"value":{"oneOf":[{"type":"object","required":["uint128"],"properties":{"uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}},"additionalProperties":false},{"type":"object","required":["decimal"],"properties":{"decimal":{"description":"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)","type":"string","$original_type":"Decimal"}},"additionalProperties":false},{"type":"object","required":["coin"],"properties":{"coin":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"},"denom":{"type":"string"}},"$original_type":"Coin"}},"additionalProperties":false},{"type":"object","required":["string"],"properties":{"string":{"type":"string"}},"additionalProperties":false},{"type":"object","required":["bool"],"properties":{"bool":{"type":"boolean"}},"additionalProperties":false},{"type":"object","required":["vec"],"properties":{"vec":{"type":"array","items":"SELF"}},"additionalProperties":false},{"type":"object","required":["binary"],"properties":{"binary":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string","$original_type":"Binary"}},"additionalProperties":false},{"type":"object","required":["object"],"properties":{"object":{"type":"object","additionalProperties":"SELF"}},"additionalProperties":false}],"$original_type":"Primitive","title":"Value"}},"additionalProperties":false,"$id":"get_value","version":"0.2.0","classifier":"response","class":"response"},"ui-schema":{},"form-data":{}}