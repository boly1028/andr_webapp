{"schema":{"description":"Constructs an AMPPkt with a given AMPMsg and sends it to the recipient","type":"object","required":["send"],"properties":{"send":{"type":"object","required":["message"],"properties":{"message":{"description":"This struct defines how the kernel parses and relays messages between ADOs If the desired recipient is via IBC then namespacing must be employed The attached message must be a binary encoded execute message for the receiving ADO Funds can be attached for an individual message and will be attached accordingly","type":"object","required":["config","funds","message","recipient"],"properties":{"config":{"description":"When the message should reply, defaults to Always","allOf":[{"description":"The configuration of the message to be sent.\n\nUsed when a sub message is generated for the given AMP Msg (only used in the case of Wasm Messages).","type":"object","required":["direct","exit_at_error","reply_on"],"properties":{"direct":{"description":"Whether to send the message directly to the given recipient","type":"boolean"},"exit_at_error":{"description":"Determines whether the operation should terminate or proceed upon a failed message","type":"boolean"},"gas_limit":{"description":"An optional imposed gas limit for the message","type":["integer","null"],"format":"uint64","minimum":0},"reply_on":{"description":"When the message should reply, defaults to Always","allOf":[{"description":"Use this to define when the contract gets a response callback. If you only need it for errors or success you can select just those in order to save gas.","oneOf":[{"description":"Always perform a callback after SubMsg is processed","type":"string","enum":["always"]},{"description":"Only callback if SubMsg returned an error, no callback on success case","type":"string","enum":["error"]},{"description":"Only callback if SubMsg was successful, no callback on error case","type":"string","enum":["success"]},{"description":"Never make a callback - this is like the original CosmosMsg semantics","type":"string","enum":["never"]}],"$original_type":"ReplyOn"}]}},"additionalProperties":false,"$original_type":"AMPMsgConfig"}]},"funds":{"description":"Any funds to be attached to the message, defaults to an empty vector","type":"array","items":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"},"denom":{"type":"string"}},"$original_type":"Coin"}},"message":{"description":"The message to be sent to the recipient","allOf":[{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string","$original_type":"Binary"}]},"recipient":{"description":"The message recipient, can be a contract/wallet address or a namespaced URI","allOf":[{"description":"An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`","type":"string","$original_type":"AndrAddr"}]}},"additionalProperties":false,"$original_type":"AMPMsg","title":"Message"}},"additionalProperties":false,"title":"Send"}},"additionalProperties":false,"title":"Send","$id":"send","class":"modifier","version":"0.2.15","classifier":""},"ui-schema":{},"form-data":{}}