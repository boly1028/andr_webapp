{
    "schema": {
        "title": "Start Sale",
        "description": "Initiates a new crowdfund with the specified information.",
        "type": "object",
        "required": [
            "start_sale"
        ],
        "properties": {
            "start_sale": {
                "type": "object",
                "required": [
                    "expiration",
                    "min_tokens_sold",
                    "price",
                    "recipient"
                ],
                "properties": {
                    "expiration": {
                        "title": "Crowdfund End Date",
                        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future).",
                        "allOf": [
                            {
                                "title": "Expiration",
                                "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
                                "oneOf": [
                                    {
                                        "title": "At height",
                                        "description": "The height at which the event expires",
                                        "type": "object",
                                        "required": [
                                            "at_height"
                                        ],
                                        "properties": {
                                            "at_height": {
                                                "type": "integer",
                                                "format": "uint64",
                                                "minimum": 0
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "title": "At time",
                                        "description":"The time at which the event expires",
                                        "type": "object",
                                        "required": [
                                            "at_time"
                                        ],
                                        "properties": {
                                            "at_time": {
                                                "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
                                                "allOf": [
                                                    {
                                                        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
                                                        "type": "string"
                                                    }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "title": "Never",
                                        "type": "object",
                                        "required": [
                                            "never"
                                        ],
                                        "properties": {
                                            "never": {
                                                "type": "object"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        ]
                    },
                    "max_amount_per_wallet": {
                        "description": "The amount of tokens a wallet can purchase, default is 1.",
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "uint32",
                        "minimum": 0,
                        "title": "max_amount_per_wallet"
                    },
                    "min_tokens_sold": {
                        "description": "The minimum amount of tokens sold to go through with the sale.",
                        "allOf": [
                            {
                                "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
                                "type": "string"
                            }
                        ],
                        "title": "min_tokens_sold"
                    },
                    "price": {
                        "description": "The price per token.",
                        "allOf": [
                            {
                                "type": "object",
                                "required": [
                                    "amount",
                                    "denom"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
                                        "type": "string"
                                    },
                                    "denom": {
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "title": "price"
                    },
                    "recipient": {
                        "title": "Token Purchaser",
                        "description": "The recipient of the funds if the sale met minimum required number of tokens to be sold",
                        "allOf": [
                            {
                                "oneOf": [
                                    {
                                        "title": "Non ADO Address",
                                        "description": "An address that is not another ADO. It is assumed that it is a valid address.",
                                        "type": "object",
                                        "required": [
                                            "addr"
                                        ],
                                        "properties": {
                                            "addr": {
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "title": "ADO Address",
                                        "description": "An address that is another ADO. It is assumed that it is a valid address.",
                                        "type": "object",
                                        "required": [
                                            "a_d_o"
                                        ],
                                        "properties": {
                                            "a_d_o": {
                                                "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
                                                "type": "object",
                                                "required": [
                                                    "address"
                                                ],
                                                "properties": {
                                                    "address": {
                                                        "description": "Addr can also be a human-readable identifier used in a app contract.",
                                                        "allOf": [
                                                            {
                                                                "type": "object",
                                                                "required": [
                                                                    "identifier"
                                                                ],
                                                                "properties": {
                                                                    "identifier": {
                                                                        "description": "Can be either an address or identifier of an ADO in a app.",
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "msg": {
                                                        "title": "Message",
                                                        "description": "An optional message to attach.",
                                                        "anyOf": [
                                                            {
                                                                "title": "Base64",
                                                                "description": "Valid Base64 message.",
                                                                "type": "string"
                                                            },
                                                            {
                                                                "title": "None",
                                                                "type": "null"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        "additionalProperties": false,
        "$id": "start-sale",
        "class": "modifier",
        "version": "0.1.0",
        "classifier": ""
    },
    "ui-schema": {
        "start_sale": {
            "ui:options": {
                "title": "Start Sale",
                "description": "",
                "info": "Only available to the contract owner.",
                "infoType": "error"
            },
            "expiration": {
                "ui:options": {},
                "at_height": {
                    "ui:options": {
                        "title": "Expire Height",
                        "description": " ",
                        "info": "AtHeight will expire when `env.block.height` >= height",
                        "infoType": "info"
                    }
                },
                "at_time": {
                    "ui:options": {
                        "title": "Expire Time",
                        "description": "A point in time in nanosecond precision",
                        "info": "AtTime will expire when env.block.time >= time.",
                        "infoType": "info"
                    }
                },
                "never": {
                    "ui:options": {
                        "title": "Never",
                        "description": "Never will never expire. Used to express the empty variant."
                    }
                }
            },
            "max_amount_per_wallet": {
                "ui:options": {
                    "title": "Max Tokens Per Wallet",
                    "description": "The amount of tokens a wallet can purchase",
                    "help": "Default is 1"
                }
            },
            "min_tokens_sold": {
                "ui:options": {
                    "title": "Minimum Tokens Being Sold",
                    "description": "The minimum number of tokens required to be sold"
                }
            },
            "price": {
                "ui:options": {
                    "title": "Price Per Token/NFT",
                    "description": "The price per token."
                },
                "amount": {
                    "ui:options": {
                        "title": "Amount",
                        "description": "The amount of funds."
                    }
                },
                "denom": {
                    "ui:options": {
                        "title": "Denomination",
                        "description": "The denomination of the funds."
                    }
                }
            },
            "recipient": {
                "ui:options": {},
                "addr": {
                    "ui:options": {
                        "title": "Address"
                    }
                },
                "a_d_o": {
                    "ui:options": {
                        "title": "ADO"
                    },
                    "address": {
                        "ui:options": {
                            "title": "Address",
                            "description": "Addr can also be a human-readable identifier used in a app contract."
                        },
                        "identifier": {
                            "ui:options": {
                                "description": "Can be either an address or app component name of a specific ADO within an app",
                                "title": "Identifier"
                            }
                        }
                    },
                    "msg": {
                        "ui:options": {}
                    }
                }
            }
        }
    },
    "form-data": {}
}