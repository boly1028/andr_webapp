{
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "CW20",
    "description": "The CW20 Token ADO is an ADO to create a token, The contract supports modules to extend it's functionality.",
    "type": "object",
    "required": [
      "decimals",
      "initial_balances",
      "name",
      "symbol"
    ],
    "properties": {
      "decimals": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0,
        "title": "Decimals"
      },
      "initial_balances": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "title": "Initial balances"
      },
      "marketing": {
        "title": " ",
        "description": "",
        "anyOf": [
          {
            "title": "Marketing Information",
            "description": "Optional field to define the marketing information of the project.",
            "type": "object",
            "properties": {
              "description": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "logo": {
                "title": " ",
                "description": "A link to the logo, or a comment that there is an on-chain logo stored.",
                "anyOf": [
                  {
                    "title": "Token Logo",
                    "description": "A link to the logo, or a comment that there is an on-chain logo stored.",
                    "oneOf": [
                      {
                        "title": "URL",
                        "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "title": "Embedded",
                        "description": "Logo content stored on the blockchain.",
                        "type": "object",
                        "required": [
                          "embedded"
                        ],
                        "properties": {
                          "embedded": {
                            "title": " ",
                            "description": " ",
                            "oneOf": [
                              {
                                "title": "Logo as SVG",
                                "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
                                "type": "object",
                                "required": [
                                  "svg"
                                ],
                                "properties": {
                                  "svg": {
                                    "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "title": "Logo as PNG",
                                "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
                                "type": "object",
                                "required": [
                                  "png"
                                ],
                                "properties": {
                                  "png": {
                                    "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  {
                    "title": "No Logo",
                    "type": "null"
                  }
                ]
              },
              "marketing": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "project": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "title": "No Marketing Information",
            "type": "null"
          }
        ]
      },
      "mint": {
        "title": " ",
        "anyOf": [
          {
            "title": "Minter and Cap",
            "description": "Optional field to define a minter for the token and an optional cap for the total supply of tokens that can be minted. If not defined, additional tokens cannot be minted.",
            "type": "object",
            "required": [
              "minter"
            ],
            "properties": {
              "cap": {
                "title": " ",
                "description": " ",
                "anyOf": [
                  {
                    "title": "Minting Cap",
                    "description": "A hard cap on total supply that can be achieved by minting.",
                    "type": "string"
                  },
                  {
                    "title": "Unlimited Cap",
                    "type": "null"
                  }
                ]
              },
              "minter": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "title": "No minting information",
            "type": "null"
          }
        ]
      },
      "modules": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
          "type": "object",
          "required": [
            "address",
            "is_mutable",
            "module_type"
          ],
          "properties": {
            "address": {
              "type": "object",
              "required": [
                "identifier"
              ],
              "properties": {
                "identifier": {
                  "description": "Can be either an address or identifier of an ADO in a app.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "is_mutable": {
              "type": "boolean"
            },
            "module_type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "title": "Modules"
      },
      "name": {
        "type": "string",
        "title": "Name"
      },
      "symbol": {
        "type": "string",
        "title": "Symbol"
      }
    },
    "additionalProperties": false,
    "$id": "cw20",
    "version": "0.1.0",
    "classifier": "token",
    "class": "baseADO"
  },
  "ui-schema": {
    "ui:order": [
      "name",
      "symbol",
      "decimals",
      "initial_balances",
      "*"
    ],
    "name": {
      "ui:options": {
        "title": "Token Name",
        "description": "The name of the token."
      }
    },
    "symbol": {
      "ui:options": {
        "title": "Token Symbol",
        "description": "The symbol of the token.",
        "alerts": [
          {
            "text": "The symbol can only consist of letters and has to be between 3 and 12 characters.",
            "type": "error"
          }
        ]
      }
    },
    "decimals": {
      "ui:options": {
        "title": "Number of Decimals in Token",
        "description": "The number of decimals for the token."
      }
    },
    "initial_balances": {
      "ui:options": {
        "title": "Starting Balance",
        "description": "A vector containing a list of addresses and the amount of coin to initialize each."
      },
      "items": {
        "ui:options": {
          "title": "Balance",
          "description": "Contains an address and the amount of tokens for that address"
        },
        "address": {
          "ui:options": {
            "title": "Address",
            "description": "The address to recieve tokens."
          }
        },
        "amount": {
          "ui:options": {
            "title": "Amount",
            "description": "Amount of tokens"
          }
        }
      }
    },
    "marketing": {
      "ui:order": [
        "project",
        "description",
        "marketing",
        "logo",
        "*"
      ],
      "description": {
        "ui:options": {
          "title": "Token Description",
          "description": "A longer description of the token and it's utility. Designed for tooltips or such."
        }
      },
      "logo": {
        "url": {
          "ui:options": {
            "title": "Logo URL",
            "help": "Must be a valid HTTP or HTTPS URL"
          }
        },
        "embedded": {
          "svg": {
            "ui:options": {
              "title": "SVG File to Store",
              "alerts": [
                {
                  "text": "Enforce maximum size of 5KB on all variants",
                  "type": "warning"
                }
              ]
            }
          },
          "png": {
            "ui:options": {
              "title": "PNG File to Store",
              "alerts": [
                {
                  "text": "Enforce maximum size of 5KB on all variants",
                  "type": "warning"
                }
              ]
            }
          }
        }
      },
      "marketing": {
        "ui:options": {
          "title": "Authorized Marketing Address",
          "description": "The address (if any) who can update this data structure."
        }
      },
      "project": {
        "ui:options": {
          "title": "Project URL",
          "description": "A URL pointing to the project behind this token."
        }
      }
    },
    "mint": {
      "ui:order": [
        "minter",
        "cap",
        "*"
      ],
      "cap": {},
      "minter": {
        "ui:options": {
          "title": "Minting Address",
          "description": "The address to assign as a minter."
        }
      }
    },
    "modules": {
      "ui:options": {
        "title": "Additional Modules",
        "description": "An optional vector of Andromeda Modules. \"address_list\" module can be added."
      },
      "items": {
        "ui:options": {
          "title": "Module"
        },
        "ui:order": [
          "*",
          "is_mutable"
        ],
        "address": {
          "ui:options": {
            "title": "Add Module",
            "description": "",
            "alerts": [
              {
                "text": "Allowed modules: \"address_list\"",
                "type": "error"
              }
            ]
          },
          "identifier": {
            "ui:options": {
              "title": "Identifier",
              "description": "Can be either an address or app component name of a specific ADO within an app"
            }
          }
        },
        "module_type": {
          "ui:options": {
            "title": "Module Type",
            "description": "The name of the module to add. Can be set one of the following: \"address_list\"."
          }
        },
        "is_mutable": {
          "ui:options": {
            "title": "Is Module Able to be Modified?",
            "description": "Whether the module can be later modified or not."
          }
        }
      }
    }
  },
  "form-data": {}
}