{
  "schema": {
    "description": "Only with \"approval\" extension. Sends amount tokens from owner -> contract if `env.sender` has sufficient pre-approval.",
    "type": "object",
    "required": ["send_from"],
    "properties": {
      "send_from": {
        "type": "object",
        "required": ["amount", "contract", "msg", "owner"],
        "properties": {
          "amount": {
            "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
            "type": "string",
            "$original_type": "Uint128",
            "title": "Amount"
          },
          "contract": { "type": "string", "title": "Contract" },
          "msg": {
            "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
            "type": "string",
            "$original_type": "Binary",
            "title": "Msg"
          },
          "owner": { "type": "string", "title": "Owner" }
        },
        "additionalProperties": false,
        "title": "Send from"
      }
    },
    "additionalProperties": false,
    "title": "Send from",
    "$id": "send-from",
    "class": "modifier",
    "version": "0.2.1",
    "classifier": ""
  },
  "ui-schema": {
    "send_from": {
      "ui:options": {
        "title": "Send Tokens Operation",
        "description": "Sends a specified amount of tokens from the owner to the contract, provided that the `env.sender` has sufficient pre-approval."
      },
      "amount": {
        "ui:widget": "text",
        "ui:placeholder": "e.g., 10000",
        "ui:options": {
          "title": "Amount Being Sent",
          "description": "Specify the amount of tokens to send. Ensure the format aligns with Uint128 standards."
        }
      },
      "contract": {
        "ui:widget": "text",
        "ui:placeholder": "e.g., andr1...",
        "ui:options": {
          "title": "Contract Address",
          "description": "Enter the address of the contract that will receive the tokens."
        }
      },
      "msg": {
        "ui:widget": "textArea",
        "ui:placeholder": "Enter base64 encoded message",
        "ui:options": {
          "title": "Message",
          "description": "Base64 encoded message that specifies the details or conditions for the token transfer."
        }
      },
      "owner": {
        "ui:widget": "text",
        "ui:placeholder": "e.g., andr1...",
        "ui:options": {
          "title": "Owner Address",
          "description": "The address of the owner from whom the tokens are being sent."
        }
      }
    }
  },
  "form-data": {}
}
