{"schema":{"type":"object","required":["andr_hook"],"properties":{"andr_hook":{"oneOf":[{"type":"object","required":["on_execute"],"properties":{"on_execute":{"type":"object","required":["payload","sender"],"properties":{"payload":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string","$original_type":"Binary"},"sender":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["on_funds_transfer"],"properties":{"on_funds_transfer":{"type":"object","required":["amount","payload","sender"],"properties":{"amount":{"oneOf":[{"type":"object","required":["native"],"properties":{"native":{"type":"object","required":["amount","denom"],"properties":{"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"},"denom":{"type":"string"}},"$original_type":"Coin"}},"additionalProperties":false},{"type":"object","required":["cw20"],"properties":{"cw20":{"type":"object","required":["address","amount"],"properties":{"address":{"type":"string"},"amount":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string","$original_type":"Uint128"}},"additionalProperties":false,"$original_type":"Cw20Coin"}},"additionalProperties":false}],"$original_type":"Funds"},"payload":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string","$original_type":"Binary"},"sender":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["on_token_transfer"],"properties":{"on_token_transfer":{"type":"object","required":["recipient","sender","token_id"],"properties":{"recipient":{"type":"string"},"sender":{"type":"string"},"token_id":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}],"$original_type":"AndromedaHook","title":"Andr hook"}},"additionalProperties":false,"title":"Andr hook","$id":"andr-hook","class":"query","version":"0.2.1","classifier":"","description":"Query the current contract owner"},"ui-schema":{},"form-data":{}}